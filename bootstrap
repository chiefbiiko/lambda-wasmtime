#!/usr/bin/env bash -o pipefail

api=http://$AWS_LAMBDA_RUNTIME_API/2018-06-01
file=${_HANDLER%%.*}
handler=${_HANDLER##*.}
headers=$LAMBDA_TASK_ROOT/headers.txt
wasmtime=$LAMBDA_TASK_ROOT/wasmtime

trap "rm $headers" EXIT

tarball=$(awk '/^__TARBALL__/ {print NR + 1;exit 0;}' $0)
tail -n+$tarball $0 | tar --extract --xz --directory=$LAMBDA_TASK_ROOT --strip-components=1 --wildcards "*/wasmtime"

if [[ $? -ne 0 ]]; then
  curl -fsSLX POST $api/runtime/init/error -d '{"error":"runtime initialization failed"}'
  exit 1
fi

chmod 700 $wasmtime

while :; do
  event=$(curl -fsSLD $headers $api/runtime/invocation/next)
  request_id=$(grep -ioP "(?<=Lambda-Runtime-Aws-Request-Id: )(\S*)" $headers)
  _x_amzn_trace_id=$(grep -ioP "(?<=Lambda-Runtime-Trace-Id: )(\S*)" $headers)
  
  # TODO: create a context (json) object with env vars and else

  # invoke the handler
  # TODO: allow passing additional args, and pass env vars, event n context
  # also set the _X_AMZN_TRACE_ID env var for the X-Ray SDK
  return_value=$($wasmtime --invoke=$handler $file)

  if [[ $? -ne 0 ]]; then
    curl -fsSLX POST $api/runtime/invocation/$request_id/error -d '{"error":"handler execution failed"}'
  else
    curl -fsSLX POST $api/runtime/invocation/$request_id/response -d $return_value
  fi
done

__TARBALL__