#!/bin/bash

set -uo pipefail # -Eeuo

post_init_error() {
  curl -fsSLX POST "$API/init/error" -d '{"error":"runtime initialization failed"}'
}

trap post_init_error EXIT

API="http://$AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime"
FILE="$LAMBDA_TASK_ROOT/${_HANDLER%%.*}.wasm"
HANDLER="${_HANDLER##*.}"
HEADERS=/tmp/headers.txt
WARNING="warning: using \`--render\` with a function that returns values is experimental and may break in the future"
PREP_ENV_VARS="$(paste -sd "," <<< "$(env)")"

printf "env vars\n%s\nwasmtime version %s\n" "$(env)" "$(/opt/bin/wasmtime --version)";

trap - EXIT
set +u # -Eeu

while :; do
  # response="$(curl -fsSLD - "$API/invocation/next")"
  # event="${response#*\\n\\n}"
  # headers="${response%%\\n\\n*}"
  event="$(curl -fsSLD "$HEADERS" "$API/invocation/next")"
  function_arn="$(grep -ioP "(?<=Lambda-Runtime-Invoked-Function-Arn: )([^[:space:]]*)" "$HEADERS")"
  deadline_ms="$(grep -ioP "(?<=Lambda-Runtime-Deadline-Ms: )([^[:space:]]*)" "$HEADERS")"
  trace_id="$(grep -ioP "(?<=Lambda-Runtime-Trace-Id: )([^[:space:]]*)" "$HEADERS")"
  request_id="$(grep -ioP "(?<=Lambda-Runtime-Aws-Request-Id: )([^[:space:]]*)" "$HEADERS")"
  context="{\"function_arn\":\"$function_arn\",\"deadline_ms\":\"$deadline_ms\",\"request_id\":\"$request_id\",\"trace_id\":\"$trace_id\"}"

  echo "DEBUG: bout to invoke wasm.. f d t r c $function_arn $deadline_ms $trace_id $request_id $context"
  echo "wasmtime cmd"
  echo "/opt/bin/wasmtime --disable-cache --env=$PREP_ENV_VARS,_x_amzn_trace_id=$trace_id --invoke=$HANDLER $FILE $event $context 2>&1 | grep -v $WARNING"
  # {
    # allow /tmp?
  if result="$(/opt/bin/wasmtime --disable-cache --env="$PREP_ENV_VARS,_x_amzn_trace_id=$trace_id" --invoke="$HANDLER" "$FILE" "$event" "$context" 2>&1 | grep -v "$WARNING")"; then

    echo "DEBUG: invocation ok"

    curl -fsSLX POST "$API/invocation/$request_id/response" -d "$result"
  else

    echo "DEBUG: invocation fail"

    curl -fsSLX POST "$API/invocation/$request_id/error" -d "$result"
  fi
  # } &
done