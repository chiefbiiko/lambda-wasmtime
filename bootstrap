#!/bin/bash

set -Eeuo pipefail

post_init_error() {
  curl -fsSLX POST "$API/init/error" -d '{\"error\":\"bootstrap fail\"}'
}

trap post_init_error EXIT

API="http://$AWS_LAMBDA_RUNTIME_API/2018-06-01/runtime"
FILE="$LAMBDA_TASK_ROOT/${_HANDLER%%.*}.wasm"
HANDLER="${_HANDLER##*.}"
HEADERS=/tmp/.headers.txt
WARNING="warning: .* is experimental and may break in the future"
PREP_ENV_VARS="$(paste -sd "," <<< "$(env)")"

printf "env vars\n%s\nwasmtime version %s\n" "$(env)" "$(/opt/bin/wasmtime --version)"

set +Eeu
trap - EXIT
trap 'rm -f "$HEADERS"' EXIT

invoke_wasm() { # request_id trace_id event context
  if result="$(/opt/bin/wasmtime --disable-cache --enable-simd --env="$PREP_ENV_VARS,_X_AMZN_TRACE_ID=$2" --invoke="$HANDLER" "$FILE" "$3" "$4" 2>&1 | grep -v "$WARNING")"; then
    curl -fsSLX POST "$API/invocation/$1/response" -d "$result"
  else
    curl -fsSLX POST "$API/invocation/$1/error" -d "$result"
  fi
}

while :; do
  event="$(curl -fsSLD "$HEADERS" "$API/invocation/next")"
  function_arn="$(grep -ioP "(?<=Lambda-Runtime-Invoked-Function-Arn: )([^[:space:]]*)" "$HEADERS")"
  deadline_ms="$(grep -ioP "(?<=Lambda-Runtime-Deadline-Ms: )([^[:space:]]*)" "$HEADERS")"
  trace_id="$(grep -ioP "(?<=Lambda-Runtime-Trace-Id: )([^[:space:]]*)" "$HEADERS")"
  request_id="$(grep -ioP "(?<=Lambda-Runtime-Aws-Request-Id: )([^[:space:]]*)" "$HEADERS")"
  context="{\"function_arn\":\"$function_arn\",\"deadline_ms\":\"$deadline_ms\",\"request_id\":\"$request_id\",\"trace_id\":\"$trace_id\"}"

  # TODO: find a way to not block # & has failed for me
  invoke_wasm "$request_id" "$trace_id" "$event" "$context"
done