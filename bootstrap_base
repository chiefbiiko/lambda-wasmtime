#!/bin/bash

set -o pipefail

api=http://$AWS_LAMBDA_RUNTIME_API/2018-06-01
file=${_HANDLER%%.*}
handler=${_HANDLER##*.}
# errors=$LAMBDA_TASK_ROOT/errors.txt
# headers=$LAMBDA_TASK_ROOT/headers.txt
wasmtime=$(which wasmtime)

# trap "rm $errors $headers" EXIT

# line_number=$(awk '/^__WASMTIME__/ {print NR + 1;exit 0;}' $0)
# tail -n+$line_number $0 | gunzip -c > $wasmtime

# if [[ $? -ne 0 ]]; then
#   curl -fsSLX POST $api/runtime/init/error -d '{"error":"runtime initialization failed"}'
#   exit 1
# fi

while :; do
  response=$(curl -fsSLD - $api/runtime/invocation/next)
  headers_body=(${response//\\n\\n/ })
  headers=${headers_body[0]}
  event=${headers_body[1]}
  request_id=$(grep -ioP "(?<=Lambda-Runtime-Aws-Request-Id: )(\S*)" <<< $headers)
  _x_amzn_trace_id=$(grep -ioP "(?<=Lambda-Runtime-Trace-Id: )(\S*)" <<< $headers)

  # TODO: pass env vars, event n context, allow setting meta wasmtime flags
  # also set the _X_AMZN_TRACE_ID env var for the X-Ray SDK

  # invoke the handler :TODO: save stdout AND stderr to vars
  return_value=$($wasmtime --invoke=$handler $LAMBDA_TASK_ROOT/$file.wasm 2> $errors)

  if [[ $? -ne 0 ]]; then
    curl -fsSLX POST $api/runtime/invocation/$request_id/error -d "{\"error\":\"$(cat $errors)\"}"
  else
    curl -fsSLX POST $api/runtime/invocation/$request_id/response -d $return_value
  fi
done

# __WASMTIME__