name: ci

on:
  push:
    branches:
      - master
      - embedded-wasmtime
  release:
    types:
      - created

env:
  RUNTIME_ZIP_FILE_NAME: runtime.zip
  DEMO_ZIP_FILE_NAME: demo.zip
  PAYLOAD_PNG_IMAGE_PATH: demo/luigi.png

jobs:
  build_runtime:
    name: build the runtime
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1.0.0
        with:
          ref: ${{ github.ref }}
      - name: install cargo-make
      #   run: |
      #     apt-get update -y
      #     apt-get install -y build-essential libssl-dev pkg-config
      #     cargo install --debug cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: install custom cargo make deps
        run: sudo cargo make install-deps
      - name: build and bundle
        run: cargo make --env RUNTIME_ZIP_FILE_NAME=${{ env.RUNTIME_ZIP_FILE_NAME }} runtime
      - name: upload the runtime layer artifact
        uses: actions/upload-artifact@v1
        with:
          name: runtime
          path: ${{ env.RUNTIME_ZIP_FILE_NAME }}
  build_demo:
    name: build the demo
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1.0.0
        with:
          ref: ${{ github.ref }}
      - name: install cargo-make
        # run: |
        #   apt-get update -y
        #   apt-get install -y build-essential libssl-dev pkg-config
        #   cargo install --debug cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: compile the demo to wasm and zipup a lambda bundle
        run: cargo make --makefile demo/Makefile.toml --env DEMO_ZIP_FILE_NAME=${{ env.DEMO_ZIP_FILE_NAME }} bundle
      - name: upload the demo bundle artifact
        uses: actions/upload-artifact@v1
        with:
          name: demo
          path: demo/${{ env.DEMO_ZIP_FILE_NAME }}
  test:
    name: test the runtime on AWS Lambda
    needs: 
      - build_runtime
      - build_demo
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1.0.0
        with:
          ref: ${{ github.ref }}
      - name: download the runtime layer artifact
        uses: actions/download-artifact@v1
        with:
          name: runtime
      - name: download the demo bundle artifact
        uses: actions/download-artifact@v1
        with:
          name: demo
      - name: get version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: publish a new runtime layer version
        id: publish_layer
        run: |
          runtime_arn="$(aws lambda publish-layer-version \
            --layer-name lambda_wasmtime_${{ steps.get_version.outputs.version }} \
            --description "lambda-wasmtime runtime ${{ steps.get_version.outputs.version }}" \
            --compatible-runtimes provided \
            --license-info MIT \
            --zip-file fileb://runtime/${{ env.RUNTIME_ZIP_FILE_NAME }} \
            | \
            jq '.LayerVersionArn')"
            echo ::set-output name=runtime_arn::$runtime_arn
      - name: deploy the demo lambda
        run: |
          aws lambda create-function \
            --function-name LambdaWasmtimeTestFunction \
            --runtime provided \
            --role arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
            --handler demo.handler \
            --description "lambda-wasmtime test function" \
            --timeout 3 \
            --memory-size 128 \
            --layers ${{ steps.publish_layer.outputs.runtime_arn }} \
            --zip-file fileb://demo/${{ env.DEMO_ZIP_FILE_NAME }}
      - name: invoke lambda
        run: |
          aws lambda invoke \
            --function-name LambdaWasmtimeTestFunction \
            --log-type Tail \
            --payload "{\"data\":\"$(base64 $PAYLOAD_PNG_IMAGE_PATH)\"}" \
            /dev/stdout 1>/dev/null \
            | \
            jq '.Payload.data' | \
            base64 --decode \
            > thumbnail.png
      - name: check image and thumbnail sizes
        run: |
          image_size="$(wc -c $PAYLOAD_PNG_IMAGE_PATH | grep -Eo '[0-9]+')"
          thumbnail_size="$(wc -c thumbnail.png | grep -Eo '[0-9]+')"
          if [[ ! $thumbnail_size -lt $image_size ]]; then exit 1; fi